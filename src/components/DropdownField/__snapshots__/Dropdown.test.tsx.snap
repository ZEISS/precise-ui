// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DropdownField /> should be opened <DropdownField open> 1`] = `
.c9 {
  display: inline-block;
}

.c9 > svg {
  float: left;
}

.c8 {
  padding: 0 1rem;
}

.c8 i {
  display: block;
}

.c7 + .c7 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(0,139,208,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c12 {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: fixed;
  z-index: 10000;
  overflow-x: hidden;
  overflow-y: auto;
}

.c13 {
  height: 0;
  width: 0;
  overflow: hidden;
}

.c23 {
  overflow: hidden;
  z-index: 9999;
  background: rgba(64,64,64,0.4);
}

.c17 {
  font-size: 1rem;
  line-height: 1.375rem;
  position: absolute;
  top: 1rem;
  right: 1rem;
  background-color: rgba(255,255,255,0);
  padding: 0;
  border: none;
  -webkit-align-self: start;
  -ms-flex-item-align: start;
  align-self: start;
  cursor: pointer;
  color: rgba(0,0,0,1);
  opacity: 0.2;
  -webkit-transition: opacity 0.2s ease-out;
  transition: opacity 0.2s ease-out;
}

.c17:hover {
  opacity: 0.5;
}

.c14 {
  padding: 1rem;
  box-sizing: border-box;
  height: 100%;
  overflow-y: auto;
  background: rgba(255,255,255,1);
}

.c18 {
  box-sizing: border-box;
  margin: 0;
}

.c15 {
  font-size: 0.875rem;
  line-height: 1.125rem;
  color: rgba(0,139,208,1);
  padding-bottom: 1rem;
  min-height: 0.875rem;
}

.c10 {
  position: relative;
  outline: none;
}

.c19 {
  font-size: 1rem;
  line-height: 1.375rem;
  background: rgba(255,255,255,0);
  color: rgba(114,114,114,1);
  list-style: none;
  box-sizing: border-box;
  opacity: 1.0;
  cursor: pointer;
  display: block;
  width: 100%;
  height: auto;
  position: relative;
}

.c19 a {
  color: inherit;
  display: block;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c19 a:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c20 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c21 {
  width: 100%;
}

.c22 {
  padding: 1rem;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(211,211,211,1);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

.c6 {
  display: inline-block;
  line-height: normal;
  border: 0;
  color: rgba(0,0,0,1);
}

.c16 {
  padding-left: 1rem;
}

.c11 {
  border: 2em solid transparent;
}

<DropdownFieldInt
  borderless={true}
  data={
    Array [
      "1",
      "2",
    ]
  }
  defaultValue="1"
  open={true}
>
  <styled.div
    open={true}
  >
    <div
      className="c0"
      open={true}
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={0}
            focused={true}
            hasValue={true}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={false}
                focused={true}
                hasValue={true}
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      >
                        <styled.span
                          key="1"
                        >
                          <span
                            className="c6"
                          >
                            1
                          </span>
                        </styled.span>
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                hasValue={true}
              />
              <styled.div>
                <div
                  className="c7 c8"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowUp"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c9"
                      >
                        <KeyboardArrowUp
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"
                            />
                          </svg>
                        </KeyboardArrowUp>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={true}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={
            Array [
              0,
            ]
          }
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={true}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={
              Array [
                0,
              ]
            }
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={true}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={true}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
              tabIndex={0}
            >
              <div
                autoFocus={true}
                className="c10"
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={true}
                >
                  <Styled(WindowPopup)
                    label={<ForwardRef(styled.div) />}
                    onClose={[Function]}
                  >
                    <WindowPopup
                      className="c11"
                      label={<ForwardRef(styled.div) />}
                      onClose={[Function]}
                    >
                      <Blocker
                        className="c11"
                        onClose={[Function]}
                      >
                        <styled.div
                          className="c11"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                        >
                          <div
                            className="c12 c11"
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                          >
                            <styled.a
                              href="#"
                              onFocus={[Function]}
                            >
                              <a
                                className="c13"
                                href="#"
                                onFocus={[Function]}
                              />
                            </styled.a>
                            <styled.div
                              tabIndex={0}
                            >
                              <div
                                className="c14"
                                tabIndex={0}
                              >
                                <styled.div>
                                  <div
                                    className="c15"
                                  >
                                    <styled.div>
                                      <div
                                        className="c16"
                                      />
                                    </styled.div>
                                  </div>
                                </styled.div>
                                <CloseButton
                                  onClick={[Function]}
                                >
                                  <styled.a
                                    onClick={[Function]}
                                  >
                                    <a
                                      className="c17"
                                      onClick={[Function]}
                                    >
                                      <Icon
                                        name="Close"
                                        size={1.1}
                                      >
                                        <styled.i>
                                          <i
                                            className="c9"
                                          >
                                            <Close
                                              height="1.1em"
                                              style={
                                                Object {
                                                  "fill": "currentColor",
                                                  "stroke": undefined,
                                                }
                                              }
                                              viewBox="0 0 24 24"
                                              width="1.1em"
                                            >
                                              <svg
                                                height="1.1em"
                                                style={
                                                  Object {
                                                    "fill": "currentColor",
                                                    "stroke": undefined,
                                                  }
                                                }
                                                viewBox="0 0 24 24"
                                                width="1.1em"
                                              >
                                                <path
                                                  d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                />
                                              </svg>
                                            </Close>
                                          </i>
                                        </styled.i>
                                      </Icon>
                                    </a>
                                  </styled.a>
                                </CloseButton>
                                <styled.div>
                                  <div
                                    className="c18"
                                  >
                                    <styled.li
                                      hovered={false}
                                      key="1-0"
                                      onClick={[Function]}
                                      onMouseMove={[Function]}
                                      selected={true}
                                    >
                                      <li
                                        className="c19"
                                        onClick={[Function]}
                                        onMouseMove={[Function]}
                                        selected={true}
                                      >
                                        <styled.div>
                                          <div
                                            className="c20"
                                          >
                                            <styled.div>
                                              <div
                                                className="c21"
                                              >
                                                <styled.div
                                                  condensed={false}
                                                  showTick={false}
                                                >
                                                  <div
                                                    className="c22"
                                                  >
                                                    1
                                                  </div>
                                                </styled.div>
                                              </div>
                                            </styled.div>
                                          </div>
                                        </styled.div>
                                      </li>
                                    </styled.li>
                                    <styled.li
                                      hovered={false}
                                      key="2-1"
                                      onClick={[Function]}
                                      onMouseMove={[Function]}
                                      selected={false}
                                    >
                                      <li
                                        className="c19"
                                        onClick={[Function]}
                                        onMouseMove={[Function]}
                                        selected={false}
                                      >
                                        <styled.div>
                                          <div
                                            className="c20"
                                          >
                                            <styled.div>
                                              <div
                                                className="c21"
                                              >
                                                <styled.div
                                                  condensed={false}
                                                  showTick={false}
                                                >
                                                  <div
                                                    className="c22"
                                                  >
                                                    2
                                                  </div>
                                                </styled.div>
                                              </div>
                                            </styled.div>
                                          </div>
                                        </styled.div>
                                      </li>
                                    </styled.li>
                                  </div>
                                </styled.div>
                              </div>
                            </styled.div>
                            <styled.a
                              href="#"
                              onFocus={[Function]}
                            >
                              <a
                                className="c13"
                                href="#"
                                onFocus={[Function]}
                              />
                            </styled.a>
                          </div>
                        </styled.div>
                        <Styled(styled.div)
                          className="c11"
                        >
                          <div
                            className="c12 c23 c11"
                          />
                        </Styled(styled.div)>
                      </Blocker>
                    </WindowPopup>
                  </Styled(WindowPopup)>
                </Component>
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should be opened towards the bottom <DropdownField open direction={0}> 1`] = `
.c9 {
  display: inline-block;
}

.c9 > svg {
  float: left;
}

.c8 {
  padding: 0 1rem;
}

.c8 i {
  display: block;
}

.c7 + .c7 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(0,139,208,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c12 {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: fixed;
  z-index: 10000;
  overflow-x: hidden;
  overflow-y: auto;
}

.c13 {
  height: 0;
  width: 0;
  overflow: hidden;
}

.c23 {
  overflow: hidden;
  z-index: 9999;
  background: rgba(64,64,64,0.4);
}

.c17 {
  font-size: 1rem;
  line-height: 1.375rem;
  position: absolute;
  top: 1rem;
  right: 1rem;
  background-color: rgba(255,255,255,0);
  padding: 0;
  border: none;
  -webkit-align-self: start;
  -ms-flex-item-align: start;
  align-self: start;
  cursor: pointer;
  color: rgba(0,0,0,1);
  opacity: 0.2;
  -webkit-transition: opacity 0.2s ease-out;
  transition: opacity 0.2s ease-out;
}

.c17:hover {
  opacity: 0.5;
}

.c14 {
  padding: 1rem;
  box-sizing: border-box;
  height: 100%;
  overflow-y: auto;
  background: rgba(255,255,255,1);
}

.c18 {
  box-sizing: border-box;
  margin: 0;
}

.c15 {
  font-size: 0.875rem;
  line-height: 1.125rem;
  color: rgba(0,139,208,1);
  padding-bottom: 1rem;
  min-height: 0.875rem;
}

.c10 {
  position: relative;
  outline: none;
}

.c19 {
  font-size: 1rem;
  line-height: 1.375rem;
  background: rgba(255,255,255,0);
  color: rgba(114,114,114,1);
  list-style: none;
  box-sizing: border-box;
  opacity: 1.0;
  cursor: pointer;
  display: block;
  width: 100%;
  height: auto;
  position: relative;
}

.c19 a {
  color: inherit;
  display: block;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c19 a:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c20 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c21 {
  width: 100%;
}

.c22 {
  padding: 1rem;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(211,211,211,1);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

.c6 {
  display: inline-block;
  line-height: normal;
  border: 0;
  color: rgba(0,0,0,1);
}

.c16 {
  padding-left: 1rem;
}

.c11 {
  border: 2em solid transparent;
}

<DropdownFieldInt
  borderless={true}
  data={
    Array [
      "1",
      "2",
    ]
  }
  defaultValue="1"
  direction={0}
  open={true}
>
  <styled.div
    direction={0}
    open={true}
  >
    <div
      className="c0"
      direction={0}
      open={true}
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={0}
            focused={true}
            hasValue={true}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={false}
                focused={true}
                hasValue={true}
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      >
                        <styled.span
                          key="1"
                        >
                          <span
                            className="c6"
                          >
                            1
                          </span>
                        </styled.span>
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                hasValue={true}
              />
              <styled.div>
                <div
                  className="c7 c8"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowUp"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c9"
                      >
                        <KeyboardArrowUp
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"
                            />
                          </svg>
                        </KeyboardArrowUp>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={false}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          direction={0}
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={
            Array [
              0,
            ]
          }
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={true}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={false}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            direction={0}
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={
              Array [
                0,
              ]
            }
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={true}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={false}
              direction={0}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
              tabIndex={0}
            >
              <div
                autoFocus={true}
                className="c10"
                direction={0}
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={true}
                >
                  <Styled(WindowPopup)
                    label={<ForwardRef(styled.div) />}
                    onClose={[Function]}
                  >
                    <WindowPopup
                      className="c11"
                      label={<ForwardRef(styled.div) />}
                      onClose={[Function]}
                    >
                      <Blocker
                        className="c11"
                        onClose={[Function]}
                      >
                        <styled.div
                          className="c11"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                        >
                          <div
                            className="c12 c11"
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                          >
                            <styled.a
                              href="#"
                              onFocus={[Function]}
                            >
                              <a
                                className="c13"
                                href="#"
                                onFocus={[Function]}
                              />
                            </styled.a>
                            <styled.div
                              tabIndex={0}
                            >
                              <div
                                className="c14"
                                tabIndex={0}
                              >
                                <styled.div>
                                  <div
                                    className="c15"
                                  >
                                    <styled.div>
                                      <div
                                        className="c16"
                                      />
                                    </styled.div>
                                  </div>
                                </styled.div>
                                <CloseButton
                                  onClick={[Function]}
                                >
                                  <styled.a
                                    onClick={[Function]}
                                  >
                                    <a
                                      className="c17"
                                      onClick={[Function]}
                                    >
                                      <Icon
                                        name="Close"
                                        size={1.1}
                                      >
                                        <styled.i>
                                          <i
                                            className="c9"
                                          >
                                            <Close
                                              height="1.1em"
                                              style={
                                                Object {
                                                  "fill": "currentColor",
                                                  "stroke": undefined,
                                                }
                                              }
                                              viewBox="0 0 24 24"
                                              width="1.1em"
                                            >
                                              <svg
                                                height="1.1em"
                                                style={
                                                  Object {
                                                    "fill": "currentColor",
                                                    "stroke": undefined,
                                                  }
                                                }
                                                viewBox="0 0 24 24"
                                                width="1.1em"
                                              >
                                                <path
                                                  d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                />
                                              </svg>
                                            </Close>
                                          </i>
                                        </styled.i>
                                      </Icon>
                                    </a>
                                  </styled.a>
                                </CloseButton>
                                <styled.div>
                                  <div
                                    className="c18"
                                  >
                                    <styled.li
                                      hovered={false}
                                      key="1-0"
                                      onClick={[Function]}
                                      onMouseMove={[Function]}
                                      selected={true}
                                    >
                                      <li
                                        className="c19"
                                        onClick={[Function]}
                                        onMouseMove={[Function]}
                                        selected={true}
                                      >
                                        <styled.div>
                                          <div
                                            className="c20"
                                          >
                                            <styled.div>
                                              <div
                                                className="c21"
                                              >
                                                <styled.div
                                                  condensed={false}
                                                  showTick={false}
                                                >
                                                  <div
                                                    className="c22"
                                                  >
                                                    1
                                                  </div>
                                                </styled.div>
                                              </div>
                                            </styled.div>
                                          </div>
                                        </styled.div>
                                      </li>
                                    </styled.li>
                                    <styled.li
                                      hovered={false}
                                      key="2-1"
                                      onClick={[Function]}
                                      onMouseMove={[Function]}
                                      selected={false}
                                    >
                                      <li
                                        className="c19"
                                        onClick={[Function]}
                                        onMouseMove={[Function]}
                                        selected={false}
                                      >
                                        <styled.div>
                                          <div
                                            className="c20"
                                          >
                                            <styled.div>
                                              <div
                                                className="c21"
                                              >
                                                <styled.div
                                                  condensed={false}
                                                  showTick={false}
                                                >
                                                  <div
                                                    className="c22"
                                                  >
                                                    2
                                                  </div>
                                                </styled.div>
                                              </div>
                                            </styled.div>
                                          </div>
                                        </styled.div>
                                      </li>
                                    </styled.li>
                                  </div>
                                </styled.div>
                              </div>
                            </styled.div>
                            <styled.a
                              href="#"
                              onFocus={[Function]}
                            >
                              <a
                                className="c13"
                                href="#"
                                onFocus={[Function]}
                              />
                            </styled.a>
                          </div>
                        </styled.div>
                        <Styled(styled.div)
                          className="c11"
                        >
                          <div
                            className="c12 c23 c11"
                          />
                        </Styled(styled.div)>
                      </Blocker>
                    </WindowPopup>
                  </Styled(WindowPopup)>
                </Component>
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should be opened towards the top <DropdownField open direction={1}> 1`] = `
.c9 {
  display: inline-block;
}

.c9 > svg {
  float: left;
}

.c8 {
  padding: 0 1rem;
}

.c8 i {
  display: block;
}

.c7 + .c7 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(0,139,208,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c12 {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: fixed;
  z-index: 10000;
  overflow-x: hidden;
  overflow-y: auto;
}

.c13 {
  height: 0;
  width: 0;
  overflow: hidden;
}

.c23 {
  overflow: hidden;
  z-index: 9999;
  background: rgba(64,64,64,0.4);
}

.c17 {
  font-size: 1rem;
  line-height: 1.375rem;
  position: absolute;
  top: 1rem;
  right: 1rem;
  background-color: rgba(255,255,255,0);
  padding: 0;
  border: none;
  -webkit-align-self: start;
  -ms-flex-item-align: start;
  align-self: start;
  cursor: pointer;
  color: rgba(0,0,0,1);
  opacity: 0.2;
  -webkit-transition: opacity 0.2s ease-out;
  transition: opacity 0.2s ease-out;
}

.c17:hover {
  opacity: 0.5;
}

.c14 {
  padding: 1rem;
  box-sizing: border-box;
  height: 100%;
  overflow-y: auto;
  background: rgba(255,255,255,1);
}

.c18 {
  box-sizing: border-box;
  margin: 0;
}

.c15 {
  font-size: 0.875rem;
  line-height: 1.125rem;
  color: rgba(0,139,208,1);
  padding-bottom: 1rem;
  min-height: 0.875rem;
}

.c10 {
  position: relative;
  outline: none;
}

.c19 {
  font-size: 1rem;
  line-height: 1.375rem;
  background: rgba(255,255,255,0);
  color: rgba(114,114,114,1);
  list-style: none;
  box-sizing: border-box;
  opacity: 1.0;
  cursor: pointer;
  display: block;
  width: 100%;
  height: auto;
  position: relative;
}

.c19 a {
  color: inherit;
  display: block;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c19 a:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c20 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c21 {
  width: 100%;
}

.c22 {
  padding: 1rem;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(211,211,211,1);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

.c6 {
  display: inline-block;
  line-height: normal;
  border: 0;
  color: rgba(0,0,0,1);
}

.c16 {
  padding-left: 1rem;
}

.c11 {
  border: 2em solid transparent;
}

<DropdownFieldInt
  borderless={true}
  data={
    Array [
      "1",
      "2",
    ]
  }
  defaultValue="1"
  direction={1}
  open={true}
>
  <styled.div
    direction={1}
    open={true}
  >
    <div
      className="c0"
      direction={1}
      open={true}
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={0}
            focused={true}
            hasValue={true}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={false}
                focused={true}
                hasValue={true}
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      >
                        <styled.span
                          key="1"
                        >
                          <span
                            className="c6"
                          >
                            1
                          </span>
                        </styled.span>
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                hasValue={true}
              />
              <styled.div>
                <div
                  className="c7 c8"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowUp"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c9"
                      >
                        <KeyboardArrowUp
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"
                            />
                          </svg>
                        </KeyboardArrowUp>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={false}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          direction={1}
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={
            Array [
              0,
            ]
          }
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={true}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={false}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            direction={1}
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={
              Array [
                0,
              ]
            }
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={true}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={false}
              direction={1}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
              tabIndex={0}
            >
              <div
                autoFocus={true}
                className="c10"
                direction={1}
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <Component
                  border={1}
                  direction={1}
                  onClick={[Function]}
                  open={true}
                >
                  <Styled(WindowPopup)
                    label={<ForwardRef(styled.div) />}
                    onClose={[Function]}
                  >
                    <WindowPopup
                      className="c11"
                      label={<ForwardRef(styled.div) />}
                      onClose={[Function]}
                    >
                      <Blocker
                        className="c11"
                        onClose={[Function]}
                      >
                        <styled.div
                          className="c11"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                        >
                          <div
                            className="c12 c11"
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                          >
                            <styled.a
                              href="#"
                              onFocus={[Function]}
                            >
                              <a
                                className="c13"
                                href="#"
                                onFocus={[Function]}
                              />
                            </styled.a>
                            <styled.div
                              tabIndex={0}
                            >
                              <div
                                className="c14"
                                tabIndex={0}
                              >
                                <styled.div>
                                  <div
                                    className="c15"
                                  >
                                    <styled.div>
                                      <div
                                        className="c16"
                                      />
                                    </styled.div>
                                  </div>
                                </styled.div>
                                <CloseButton
                                  onClick={[Function]}
                                >
                                  <styled.a
                                    onClick={[Function]}
                                  >
                                    <a
                                      className="c17"
                                      onClick={[Function]}
                                    >
                                      <Icon
                                        name="Close"
                                        size={1.1}
                                      >
                                        <styled.i>
                                          <i
                                            className="c9"
                                          >
                                            <Close
                                              height="1.1em"
                                              style={
                                                Object {
                                                  "fill": "currentColor",
                                                  "stroke": undefined,
                                                }
                                              }
                                              viewBox="0 0 24 24"
                                              width="1.1em"
                                            >
                                              <svg
                                                height="1.1em"
                                                style={
                                                  Object {
                                                    "fill": "currentColor",
                                                    "stroke": undefined,
                                                  }
                                                }
                                                viewBox="0 0 24 24"
                                                width="1.1em"
                                              >
                                                <path
                                                  d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                />
                                              </svg>
                                            </Close>
                                          </i>
                                        </styled.i>
                                      </Icon>
                                    </a>
                                  </styled.a>
                                </CloseButton>
                                <styled.div>
                                  <div
                                    className="c18"
                                  >
                                    <styled.li
                                      hovered={false}
                                      key="1-0"
                                      onClick={[Function]}
                                      onMouseMove={[Function]}
                                      selected={true}
                                    >
                                      <li
                                        className="c19"
                                        onClick={[Function]}
                                        onMouseMove={[Function]}
                                        selected={true}
                                      >
                                        <styled.div>
                                          <div
                                            className="c20"
                                          >
                                            <styled.div>
                                              <div
                                                className="c21"
                                              >
                                                <styled.div
                                                  condensed={false}
                                                  showTick={false}
                                                >
                                                  <div
                                                    className="c22"
                                                  >
                                                    1
                                                  </div>
                                                </styled.div>
                                              </div>
                                            </styled.div>
                                          </div>
                                        </styled.div>
                                      </li>
                                    </styled.li>
                                    <styled.li
                                      hovered={false}
                                      key="2-1"
                                      onClick={[Function]}
                                      onMouseMove={[Function]}
                                      selected={false}
                                    >
                                      <li
                                        className="c19"
                                        onClick={[Function]}
                                        onMouseMove={[Function]}
                                        selected={false}
                                      >
                                        <styled.div>
                                          <div
                                            className="c20"
                                          >
                                            <styled.div>
                                              <div
                                                className="c21"
                                              >
                                                <styled.div
                                                  condensed={false}
                                                  showTick={false}
                                                >
                                                  <div
                                                    className="c22"
                                                  >
                                                    2
                                                  </div>
                                                </styled.div>
                                              </div>
                                            </styled.div>
                                          </div>
                                        </styled.div>
                                      </li>
                                    </styled.li>
                                  </div>
                                </styled.div>
                              </div>
                            </styled.div>
                            <styled.a
                              href="#"
                              onFocus={[Function]}
                            >
                              <a
                                className="c13"
                                href="#"
                                onFocus={[Function]}
                              />
                            </styled.a>
                          </div>
                        </styled.div>
                        <Styled(styled.div)
                          className="c11"
                        >
                          <div
                            className="c12 c23 c11"
                          />
                        </Styled(styled.div)>
                      </Blocker>
                    </WindowPopup>
                  </Styled(WindowPopup)>
                </Component>
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a <DropdownField> that does not render a placeholder 1`] = `
.c10 {
  display: inline-block;
}

.c10 > svg {
  float: left;
}

.c9 {
  padding: 0 1rem;
}

.c9 i {
  display: block;
}

.c8 + .c8 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(75,78,82,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c6 {
  padding: 0.25rem 0.5rem;
  background-color: rgba(211,211,211,1);
  color: rgba(0,0,0,1);
  display: inline-block;
  font-size: 0.8em;
  line-height: 0.8em;
  border: 0;
}

.c11 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(255,255,255,0);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

.c7 {
  margin: 0 0.5rem 0 0;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  multiple={true}
  placeholder="No value selected"
  value={
    Array [
      "1",
      "2",
    ]
  }
>
  <styled.div>
    <div
      className="c0"
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={1}
            focused={false}
            hasValue={true}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={false}
                focused={false}
                hasValue={true}
                placeholder="No value selected"
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      >
                        <Styled(styled.span)
                          key="1"
                        >
                          <span
                            className="c6 c7"
                          >
                            1
                          </span>
                        </Styled(styled.span)>
                        <Styled(styled.span)
                          key="2"
                        >
                          <span
                            className="c6 c7"
                          >
                            2
                          </span>
                        </Styled(styled.span)>
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                hasValue={true}
              />
              <styled.div>
                <div
                  className="c8 c9"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowDown"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c10"
                      >
                        <KeyboardArrowDown
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                            />
                          </svg>
                        </KeyboardArrowDown>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={true}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={
            Array [
              0,
              1,
            ]
          }
          multiple={true}
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={false}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={
              Array [
                0,
                1,
              ]
            }
            multiple={true}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={true}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <div
                autoFocus={true}
                className="c11"
                onKeyDown={[Function]}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={false}
                />
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a <DropdownField> that renders a placeholder 1`] = `
.c8 {
  display: inline-block;
}

.c8 > svg {
  float: left;
}

.c7 {
  padding: 0 1rem;
}

.c7 i {
  display: block;
}

.c6 + .c6 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(239,239,239,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c9 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(255,255,255,0);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  multiple={true}
  placeholder="No value selected"
>
  <styled.div>
    <div
      className="c0"
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={1}
            focused={false}
            hasValue={false}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={false}
                focused={false}
                hasValue={false}
                placeholder="No value selected"
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      >
                        No value selected
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                hasValue={false}
              />
              <styled.div>
                <div
                  className="c6 c7"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowDown"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c8"
                      >
                        <KeyboardArrowDown
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                            />
                          </svg>
                        </KeyboardArrowDown>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={true}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={Array []}
          multiple={true}
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={false}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={Array []}
            multiple={true}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={true}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <div
                autoFocus={true}
                className="c9"
                onKeyDown={[Function]}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={false}
                />
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a <DropdownField> with an error 1`] = `
.c11 {
  font-size: 0.75rem;
  line-height: 0.875rem;
  color: rgba(167,2,64,1);
}

.c10 {
  padding-top: 0.25rem;
  padding-left: 1rem;
  padding-bottom: 0.25rem;
}

.c8 {
  display: inline-block;
}

.c8 > svg {
  float: left;
}

.c7 {
  padding: 0 1rem;
}

.c7 i {
  display: block;
}

.c6 + .c6 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(167,2,64,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c9 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(255,255,255,0);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  error="You need to select a field"
>
  <styled.div
    error="You need to select a field"
  >
    <div
      className="c0"
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={3}
            focused={false}
            hasValue={false}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={true}
                focused={false}
                hasValue={false}
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      />
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                error="You need to select a field"
                hasValue={false}
              >
                <styled.div>
                  <div
                    className="c6 c7"
                  >
                    <Icon
                      color="rgba(167,2,64,1)"
                      name="Error"
                      size="22px"
                    >
                      <styled.i>
                        <i
                          className="c8"
                        >
                          <Error
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(167,2,64,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <svg
                              height="22px"
                              style={
                                Object {
                                  "fill": "rgba(167,2,64,1)",
                                  "stroke": undefined,
                                }
                              }
                              viewBox="0 0 24 24"
                              width="22px"
                            >
                              <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"
                              />
                            </svg>
                          </Error>
                        </i>
                      </styled.i>
                    </Icon>
                  </div>
                </styled.div>
              </InputIcon>
              <styled.div>
                <div
                  className="c6 c7"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowDown"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c8"
                      >
                        <KeyboardArrowDown
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                            />
                          </svg>
                        </KeyboardArrowDown>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={true}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={Array []}
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={false}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={Array []}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={true}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <div
                autoFocus={true}
                className="c9"
                onKeyDown={[Function]}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={false}
                />
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
      <PaddedContainer
        bottom="xsmall"
        left="medium"
        top="xsmall"
      >
        <styled.div
          bottom="xsmall"
          left="medium"
          top="xsmall"
        >
          <div
            className="c10"
          >
            <InputNotification
              error="You need to select a field"
            >
              <InputError>
                <styled.div>
                  <div
                    className="c11"
                  >
                    You need to select a field
                  </div>
                </styled.div>
              </InputError>
            </InputNotification>
          </div>
        </styled.div>
      </PaddedContainer>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a <DropdownField> with an error 2`] = `
.c11 {
  font-size: 0.75rem;
  line-height: 0.875rem;
  color: rgba(167,2,64,1);
}

.c10 {
  padding-top: 0.25rem;
  padding-left: 1rem;
  padding-bottom: 0.25rem;
}

.c8 {
  display: inline-block;
}

.c8 > svg {
  float: left;
}

.c7 {
  padding: 0 1rem;
}

.c7 i {
  display: block;
}

.c6 + .c6 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(167,2,64,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c9 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(255,255,255,0);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  error="You need to select a field"
>
  <styled.div
    error="You need to select a field"
  >
    <div
      className="c0"
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={3}
            focused={false}
            hasValue={false}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={true}
                focused={false}
                hasValue={false}
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      />
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                error="You need to select a field"
                hasValue={false}
              >
                <styled.div>
                  <div
                    className="c6 c7"
                  >
                    <Icon
                      color="rgba(167,2,64,1)"
                      name="Error"
                      size="22px"
                    >
                      <styled.i>
                        <i
                          className="c8"
                        >
                          <Error
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(167,2,64,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <svg
                              height="22px"
                              style={
                                Object {
                                  "fill": "rgba(167,2,64,1)",
                                  "stroke": undefined,
                                }
                              }
                              viewBox="0 0 24 24"
                              width="22px"
                            >
                              <path
                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"
                              />
                            </svg>
                          </Error>
                        </i>
                      </styled.i>
                    </Icon>
                  </div>
                </styled.div>
              </InputIcon>
              <styled.div>
                <div
                  className="c6 c7"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowDown"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c8"
                      >
                        <KeyboardArrowDown
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                            />
                          </svg>
                        </KeyboardArrowDown>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={true}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={Array []}
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={false}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={Array []}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={true}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <div
                autoFocus={true}
                className="c9"
                onKeyDown={[Function]}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={false}
                />
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
      <PaddedContainer
        bottom="xsmall"
        left="medium"
        top="xsmall"
      >
        <styled.div
          bottom="xsmall"
          left="medium"
          top="xsmall"
        >
          <div
            className="c10"
          >
            <InputNotification
              error="You need to select a field"
            >
              <InputError>
                <styled.div>
                  <div
                    className="c11"
                  >
                    You need to select a field
                  </div>
                </styled.div>
              </InputError>
            </InputNotification>
          </div>
        </styled.div>
      </PaddedContainer>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a borderless <DropdownField> 1`] = `
.c9 {
  display: inline-block;
}

.c9 > svg {
  float: left;
}

.c8 {
  padding: 0 1rem;
}

.c8 i {
  display: block;
}

.c7 + .c7 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(75,78,82,1);
  cursor: auto;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c10 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(255,255,255,0);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

.c6 {
  display: inline-block;
  line-height: normal;
  border: 0;
  color: rgba(0,0,0,1);
}

<DropdownFieldInt
  borderless={true}
  data={
    Array [
      "1",
      "2",
    ]
  }
  defaultValue="1"
>
  <styled.div>
    <div
      className="c0"
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={0}
            focused={false}
            hasValue={true}
          >
            <div
              className="c2 c3"
            >
              <StyledInputRow
                error={false}
                focused={false}
                hasValue={true}
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      labelShown={false}
                    >
                      <div
                        className="c5"
                      >
                        <styled.span
                          key="1"
                        >
                          <span
                            className="c6"
                          >
                            1
                          </span>
                        </styled.span>
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                hasValue={true}
              />
              <styled.div>
                <div
                  className="c7 c8"
                >
                  <Icon
                    color="rgba(75,78,82,1)"
                    name="KeyboardArrowDown"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c9"
                      >
                        <KeyboardArrowDown
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(75,78,82,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(75,78,82,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                            />
                          </svg>
                        </KeyboardArrowDown>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={true}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={
            Array [
              0,
            ]
          }
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={false}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={
              Array [
                0,
              ]
            }
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={true}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <div
                autoFocus={true}
                className="c10"
                onKeyDown={[Function]}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={false}
                />
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
    </div>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a disabled <DropdownField> 1`] = `
.c9 {
  display: inline-block;
}

.c9 > svg {
  float: left;
}

.c8 {
  padding: 0 1rem;
}

.c8 i {
  display: block;
}

.c7 + .c7 {
  padding-left: 0;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(75,78,82,1);
  cursor: not-allowed;
  overflow-y: auto;
}

.c2:hover {
  border-bottom-color: rgba(239,239,239,1);
}

.c10 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c3 {
  border: 1px solid rgba(255,255,255,0);
}

.c5 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(180,180,180,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: not-allowed;
}

.c6 {
  display: inline-block;
  line-height: normal;
  border: 0;
  color: rgba(0,0,0,1);
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  defaultValue="1"
  disabled={true}
>
  <styled.div>
    <div
      className="c0"
    >
      <styled.div
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        tabIndex={0}
      >
        <div
          className="c1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <Styled(styled.div)
            border={1}
            disabled={true}
            focused={false}
            hasValue={true}
          >
            <div
              className="c2 c3"
              disabled={true}
            >
              <StyledInputRow
                error={false}
                focused={false}
                hasValue={true}
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      disabled={true}
                      labelShown={false}
                    >
                      <div
                        className="c5"
                        disabled={true}
                      >
                        <styled.span
                          key="1"
                        >
                          <span
                            className="c6"
                          >
                            1
                          </span>
                        </styled.span>
                      </div>
                    </styled.div>
                  </div>
                </styled.div>
              </StyledInputRow>
              <InputIcon
                disabled={true}
                hasValue={true}
              />
              <styled.div>
                <div
                  className="c7 c8"
                >
                  <Icon
                    color="rgba(211,211,211,1)"
                    name="KeyboardArrowDown"
                    size="22px"
                  >
                    <styled.i>
                      <i
                        className="c9"
                      >
                        <KeyboardArrowDown
                          height="22px"
                          style={
                            Object {
                              "fill": "rgba(211,211,211,1)",
                              "stroke": undefined,
                            }
                          }
                          viewBox="0 0 24 24"
                          width="22px"
                        >
                          <svg
                            height="22px"
                            style={
                              Object {
                                "fill": "rgba(211,211,211,1)",
                                "stroke": undefined,
                              }
                            }
                            viewBox="0 0 24 24"
                            width="22px"
                          >
                            <path
                              d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                            />
                          </svg>
                        </KeyboardArrowDown>
                      </i>
                    </styled.i>
                  </Icon>
                </div>
              </styled.div>
            </div>
          </Styled(styled.div)>
        </div>
      </styled.div>
      <Responsive
        render={[Function]}
      >
        <InteractiveList
          autoFocus={true}
          autoPosition={true}
          customWrapper={[Function]}
          data={
            Array [
              "1",
              "2",
            ]
          }
          eventTypes={
            Array [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          indices={
            Array [
              0,
            ]
          }
          onChange={[Function]}
          onClick={[Function]}
          onClickOutside={[Function]}
          onKeyDown={[Function]}
          open={false}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          stopPropagation={false}
        >
          <InteractiveListInt
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            indices={
              Array [
                0,
              ]
            }
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <styled.div
              autoFocus={true}
              autoPosition={true}
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              onKeyDown={[Function]}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <div
                autoFocus={true}
                className="c10"
                onKeyDown={[Function]}
              >
                <Component
                  border={1}
                  direction={0}
                  onClick={[Function]}
                  open={false}
                />
              </div>
            </styled.div>
          </InteractiveListInt>
        </InteractiveList>
      </Responsive>
    </div>
  </styled.div>
</DropdownFieldInt>
`;
