// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<InputInfo /> should be shown with the withValidation hoc if not changed 1`] = `
.c7 {
  font-size: 0.75rem;
  line-height: 0.875rem;
  color: rgba(114,114,114,1);
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c5 {
  color: rgba(62,62,62,1);
  background: none;
  border: none;
  border-radius: 0;
  font-size: 1rem;
  font-family: inherit;
  padding: 1rem;
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  width: 100%;
  height: 100%;
  cursor: auto;
  -webkit-appearance: none;
  -webkit-transition: all 0.2s;
  transition: all 0.2s;
}

.c5::-ms-clear {
  display: none;
}

.c5::-webkit-input-placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5::-moz-placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5:-ms-input-placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5::placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5:focus {
  outline: none;
}

.c5:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c5:focus::-moz-placeholder {
  opacity: 1;
}

.c5:focus:-ms-input-placeholder {
  opacity: 1;
}

.c5:focus::placeholder {
  opacity: 1;
}

.c3 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(239,239,239,1);
  cursor: auto;
  overflow-y: auto;
}

.c3:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c6 {
  padding-top: 0.25rem;
  padding-left: 1rem;
  padding-bottom: 0.25rem;
}

.c0 {
  position: relative;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<Validator
  info="Required input"
>
  <TextField
    info="Required input"
    onChange={[Function]}
  >
    <TextFieldInt
      info="Required input"
      onChange={[Function]}
    >
      <styled.div>
        <div
          className="c0"
        >
          <Styled(StackPanel)>
            <StackPanel
              className="c1"
            >
              <styled.div
                className="c1"
                dir="row"
                wrapping="nowrap"
              >
                <div
                  className="c2 c1"
                  dir="row"
                >
                  <styled.div
                    border={1}
                    focused={false}
                    hasValue={false}
                  >
                    <div
                      className="c3"
                    >
                      <StyledInputRow
                        error={false}
                        focused={false}
                        hasValue={false}
                        multiline={false}
                      >
                        <styled.div>
                          <div
                            className="c4"
                          >
                            <styled.input
                              labelShown={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value=""
                            >
                              <input
                                className="c5"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value=""
                              />
                            </styled.input>
                          </div>
                        </styled.div>
                      </StyledInputRow>
                      <InputIcon
                        hasValue={false}
                        onClear={[Function]}
                        onClick={[Function]}
                      />
                    </div>
                  </styled.div>
                </div>
              </styled.div>
            </StackPanel>
          </Styled(StackPanel)>
          <PaddedContainer
            bottom="xsmall"
            left="medium"
            top="xsmall"
          >
            <styled.div
              bottom="xsmall"
              left="medium"
              top="xsmall"
            >
              <div
                className="c6"
              >
                <InputNotification
                  info="Required input"
                >
                  <InputInfo>
                    <styled.div>
                      <div
                        className="c7"
                      >
                        Required input
                      </div>
                    </styled.div>
                  </InputInfo>
                </InputNotification>
              </div>
            </styled.div>
          </PaddedContainer>
        </div>
      </styled.div>
    </TextFieldInt>
  </TextField>
</Validator>
`;

exports[`<InputInfo /> should not be shown with the withValidation hoc if changed 1`] = `
.c7 {
  font-size: 0.75rem;
  line-height: 0.875rem;
  color: rgba(114,114,114,1);
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
}

.c4 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c5 {
  color: rgba(62,62,62,1);
  background: none;
  border: none;
  border-radius: 0;
  font-size: 1rem;
  font-family: inherit;
  padding: 1rem;
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  width: 100%;
  height: 100%;
  cursor: auto;
  -webkit-appearance: none;
  -webkit-transition: all 0.2s;
  transition: all 0.2s;
}

.c5::-ms-clear {
  display: none;
}

.c5::-webkit-input-placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5::-moz-placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5:-ms-input-placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5::placeholder {
  color: rgba(114,114,114,1);
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}

.c5:focus {
  outline: none;
}

.c5:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c5:focus::-moz-placeholder {
  opacity: 1;
}

.c5:focus:-ms-input-placeholder {
  opacity: 1;
}

.c5:focus::placeholder {
  opacity: 1;
}

.c3 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(239,239,239,1);
  cursor: auto;
  overflow-y: auto;
}

.c3:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c6 {
  padding-top: 0.25rem;
  padding-left: 1rem;
  padding-bottom: 0.25rem;
}

.c0 {
  position: relative;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<Validator
  info="Required input"
>
  <TextField
    info="Required input"
    onChange={[Function]}
  >
    <TextFieldInt
      info="Required input"
      onChange={[Function]}
    >
      <styled.div>
        <div
          className="c0"
        >
          <Styled(StackPanel)>
            <StackPanel
              className="c1"
            >
              <styled.div
                className="c1"
                dir="row"
                wrapping="nowrap"
              >
                <div
                  className="c2 c1"
                  dir="row"
                >
                  <styled.div
                    border={1}
                    focused={false}
                    hasValue={false}
                  >
                    <div
                      className="c3"
                    >
                      <StyledInputRow
                        error={false}
                        focused={false}
                        hasValue={false}
                        multiline={false}
                      >
                        <styled.div>
                          <div
                            className="c4"
                          >
                            <styled.input
                              labelShown={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value=""
                            >
                              <input
                                className="c5"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value=""
                              />
                            </styled.input>
                          </div>
                        </styled.div>
                      </StyledInputRow>
                      <InputIcon
                        hasValue={false}
                        onClear={[Function]}
                        onClick={[Function]}
                      />
                    </div>
                  </styled.div>
                </div>
              </styled.div>
            </StackPanel>
          </Styled(StackPanel)>
          <PaddedContainer
            bottom="xsmall"
            left="medium"
            top="xsmall"
          >
            <styled.div
              bottom="xsmall"
              left="medium"
              top="xsmall"
            >
              <div
                className="c6"
              >
                <InputNotification
                  info="Required input"
                >
                  <InputInfo>
                    <styled.div>
                      <div
                        className="c7"
                      >
                        Required input
                      </div>
                    </styled.div>
                  </InputInfo>
                </InputNotification>
              </div>
            </styled.div>
          </PaddedContainer>
        </div>
      </styled.div>
    </TextFieldInt>
  </TextField>
</Validator>
`;

exports[`<InputInfo /> should not render an <InputInfo> from direct API without any children 1`] = `""`;

exports[`<InputInfo /> should not render an <InputInfo> from jsx 1`] = `""`;

exports[`<InputInfo /> should render <InputInfo> that has an error message 1`] = `
<styled.div>
  I am wrong
</styled.div>
`;
